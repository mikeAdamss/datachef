import uuid

import pytest

from pivoter.selection.base import Selectable
from pivoter.utils.preview import HtmlPreview
from tests.fixtures import path_to_fixture
from tests.fixtures.preconfigured import fixture_simple_one_tab


@pytest.fixture
def selectable_simple1():
    return fixture_simple_one_tab()


def test_standard_preview(selectable_simple1: Selectable):
    s = selectable_simple1.excel_ref("F2:F10")
    s = s | selectable_simple1.excel_ref("H6")

    p = HtmlPreview(s)
    html = p._make_preview_as_html_str()

    fix = path_to_fixture("preview", "standard.html")

    with open(fix) as f:
        preview = f.read()
        if preview != html:

            uid = str(uuid.uuid4())
            with open(f"{uid}.html", "w") as f:
                f.write(html)

            raise AssertionError(
                f"""
            Test preview does not match expected.

            Fixture of expected output: {fix.resolve()}

            Output generated by test is {uid}.html 
            """
            )


def test_bound_selection_preview(selectable_simple1: Selectable):
    s = selectable_simple1.excel_ref("F2:F10")
    s = s | selectable_simple1.excel_ref("H6")

    p = HtmlPreview(s)
    html = p._make_preview_as_html_str(bound_selection=True)

    fix = path_to_fixture("preview", "standard_bounded.html")

    with open(fix) as f:
        preview = f.read()
        if preview != html:

            uid = str(uuid.uuid4())
            with open(f"{uid}.html", "w") as f:
                f.write(html)

            raise AssertionError(
                f"""
            Test preview does not match expected.

            Fixture of expected output: {fix.resolve()}

            Output generated by test is {uid}.html 
            """
            )
